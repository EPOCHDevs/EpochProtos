// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table_def.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_table_5fdef_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_table_5fdef_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_table_5fdef_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_table_5fdef_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_table_5fdef_2eproto;
namespace epoch_proto {
class CardData;
struct CardDataDefaultTypeInternal;
extern CardDataDefaultTypeInternal _CardData_default_instance_;
class CardDef;
struct CardDefDefaultTypeInternal;
extern CardDefDefaultTypeInternal _CardDef_default_instance_;
class ColumnDef;
struct ColumnDefDefaultTypeInternal;
extern ColumnDefDefaultTypeInternal _ColumnDef_default_instance_;
class Table;
struct TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableData;
struct TableDataDefaultTypeInternal;
extern TableDataDefaultTypeInternal _TableData_default_instance_;
class TableRow;
struct TableRowDefaultTypeInternal;
extern TableRowDefaultTypeInternal _TableRow_default_instance_;
}  // namespace epoch_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::epoch_proto::CardData* Arena::CreateMaybeMessage<::epoch_proto::CardData>(Arena*);
template<> ::epoch_proto::CardDef* Arena::CreateMaybeMessage<::epoch_proto::CardDef>(Arena*);
template<> ::epoch_proto::ColumnDef* Arena::CreateMaybeMessage<::epoch_proto::ColumnDef>(Arena*);
template<> ::epoch_proto::Table* Arena::CreateMaybeMessage<::epoch_proto::Table>(Arena*);
template<> ::epoch_proto::TableData* Arena::CreateMaybeMessage<::epoch_proto::TableData>(Arena*);
template<> ::epoch_proto::TableRow* Arena::CreateMaybeMessage<::epoch_proto::TableRow>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace epoch_proto {

// ===================================================================

class ColumnDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.ColumnDef) */ {
 public:
  inline ColumnDef() : ColumnDef(nullptr) {}
  ~ColumnDef() override;
  explicit PROTOBUF_CONSTEXPR ColumnDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnDef(const ColumnDef& from);
  ColumnDef(ColumnDef&& from) noexcept
    : ColumnDef() {
    *this = ::std::move(from);
  }

  inline ColumnDef& operator=(const ColumnDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnDef& operator=(ColumnDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnDef* internal_default_instance() {
    return reinterpret_cast<const ColumnDef*>(
               &_ColumnDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ColumnDef& a, ColumnDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnDef& from) {
    ColumnDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.ColumnDef";
  }
  protected:
  explicit ColumnDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .epoch_proto.EpochFolioType type = 3;
  void clear_type();
  ::epoch_proto::EpochFolioType type() const;
  void set_type(::epoch_proto::EpochFolioType value);
  private:
  ::epoch_proto::EpochFolioType _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioType value);
  public:

  // @@protoc_insertion_point(class_scope:epoch_proto.ColumnDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class TableRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.TableRow) */ {
 public:
  inline TableRow() : TableRow(nullptr) {}
  ~TableRow() override;
  explicit PROTOBUF_CONSTEXPR TableRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableRow(const TableRow& from);
  TableRow(TableRow&& from) noexcept
    : TableRow() {
    *this = ::std::move(from);
  }

  inline TableRow& operator=(const TableRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableRow& operator=(TableRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableRow* internal_default_instance() {
    return reinterpret_cast<const TableRow*>(
               &_TableRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TableRow& a, TableRow& b) {
    a.Swap(&b);
  }
  inline void Swap(TableRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableRow& from) {
    TableRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.TableRow";
  }
  protected:
  explicit TableRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .epoch_proto.Scalar values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::epoch_proto::Scalar* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >*
      mutable_values();
  private:
  const ::epoch_proto::Scalar& _internal_values(int index) const;
  ::epoch_proto::Scalar* _internal_add_values();
  public:
  const ::epoch_proto::Scalar& values(int index) const;
  ::epoch_proto::Scalar* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >&
      values() const;

  // @@protoc_insertion_point(class_scope:epoch_proto.TableRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class TableData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.TableData) */ {
 public:
  inline TableData() : TableData(nullptr) {}
  ~TableData() override;
  explicit PROTOBUF_CONSTEXPR TableData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableData(const TableData& from);
  TableData(TableData&& from) noexcept
    : TableData() {
    *this = ::std::move(from);
  }

  inline TableData& operator=(const TableData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableData& operator=(TableData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableData* internal_default_instance() {
    return reinterpret_cast<const TableData*>(
               &_TableData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TableData& a, TableData& b) {
    a.Swap(&b);
  }
  inline void Swap(TableData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableData& from) {
    TableData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.TableData";
  }
  protected:
  explicit TableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .epoch_proto.TableRow rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::epoch_proto::TableRow* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::TableRow >*
      mutable_rows();
  private:
  const ::epoch_proto::TableRow& _internal_rows(int index) const;
  ::epoch_proto::TableRow* _internal_add_rows();
  public:
  const ::epoch_proto::TableRow& rows(int index) const;
  ::epoch_proto::TableRow* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::TableRow >&
      rows() const;

  // @@protoc_insertion_point(class_scope:epoch_proto.TableData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::TableRow > rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class Table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() override;
  explicit PROTOBUF_CONSTEXPR Table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Table& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Table& from) {
    Table::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 4,
    kCategoryFieldNumber = 2,
    kTitleFieldNumber = 3,
    kDataFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // repeated .epoch_proto.ColumnDef columns = 4;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::epoch_proto::ColumnDef* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::ColumnDef >*
      mutable_columns();
  private:
  const ::epoch_proto::ColumnDef& _internal_columns(int index) const;
  ::epoch_proto::ColumnDef* _internal_add_columns();
  public:
  const ::epoch_proto::ColumnDef& columns(int index) const;
  ::epoch_proto::ColumnDef* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::ColumnDef >&
      columns() const;

  // string category = 2;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .epoch_proto.TableData data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::epoch_proto::TableData& data() const;
  PROTOBUF_NODISCARD ::epoch_proto::TableData* release_data();
  ::epoch_proto::TableData* mutable_data();
  void set_allocated_data(::epoch_proto::TableData* data);
  private:
  const ::epoch_proto::TableData& _internal_data() const;
  ::epoch_proto::TableData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::epoch_proto::TableData* data);
  ::epoch_proto::TableData* unsafe_arena_release_data();

  // .epoch_proto.EpochFolioDashboardWidget type = 1;
  void clear_type();
  ::epoch_proto::EpochFolioDashboardWidget type() const;
  void set_type(::epoch_proto::EpochFolioDashboardWidget value);
  private:
  ::epoch_proto::EpochFolioDashboardWidget _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioDashboardWidget value);
  public:

  // @@protoc_insertion_point(class_scope:epoch_proto.Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::ColumnDef > columns_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::epoch_proto::TableData* data_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class CardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.CardData) */ {
 public:
  inline CardData() : CardData(nullptr) {}
  ~CardData() override;
  explicit PROTOBUF_CONSTEXPR CardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardData(const CardData& from);
  CardData(CardData&& from) noexcept
    : CardData() {
    *this = ::std::move(from);
  }

  inline CardData& operator=(const CardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardData& operator=(CardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardData* internal_default_instance() {
    return reinterpret_cast<const CardData*>(
               &_CardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CardData& a, CardData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CardData& from) {
    CardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.CardData";
  }
  protected:
  explicit CardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kValueFieldNumber = 2,
    kGroupFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .epoch_proto.Scalar value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::epoch_proto::Scalar& value() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_value();
  ::epoch_proto::Scalar* mutable_value();
  void set_allocated_value(::epoch_proto::Scalar* value);
  private:
  const ::epoch_proto::Scalar& _internal_value() const;
  ::epoch_proto::Scalar* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_value();

  // uint64 group = 4;
  void clear_group();
  uint64_t group() const;
  void set_group(uint64_t value);
  private:
  uint64_t _internal_group() const;
  void _internal_set_group(uint64_t value);
  public:

  // .epoch_proto.EpochFolioType type = 3;
  void clear_type();
  ::epoch_proto::EpochFolioType type() const;
  void set_type(::epoch_proto::EpochFolioType value);
  private:
  ::epoch_proto::EpochFolioType _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioType value);
  public:

  // @@protoc_insertion_point(class_scope:epoch_proto.CardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::epoch_proto::Scalar* value_;
    uint64_t group_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class CardDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.CardDef) */ {
 public:
  inline CardDef() : CardDef(nullptr) {}
  ~CardDef() override;
  explicit PROTOBUF_CONSTEXPR CardDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardDef(const CardDef& from);
  CardDef(CardDef&& from) noexcept
    : CardDef() {
    *this = ::std::move(from);
  }

  inline CardDef& operator=(const CardDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardDef& operator=(CardDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardDef* internal_default_instance() {
    return reinterpret_cast<const CardDef*>(
               &_CardDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CardDef& a, CardDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CardDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CardDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CardDef& from) {
    CardDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.CardDef";
  }
  protected:
  explicit CardDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kCategoryFieldNumber = 2,
    kGroupSizeFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // repeated .epoch_proto.CardData data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::epoch_proto::CardData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardData >*
      mutable_data();
  private:
  const ::epoch_proto::CardData& _internal_data(int index) const;
  ::epoch_proto::CardData* _internal_add_data();
  public:
  const ::epoch_proto::CardData& data(int index) const;
  ::epoch_proto::CardData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardData >&
      data() const;

  // string category = 2;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // uint64 group_size = 4;
  void clear_group_size();
  uint64_t group_size() const;
  void set_group_size(uint64_t value);
  private:
  uint64_t _internal_group_size() const;
  void _internal_set_group_size(uint64_t value);
  public:

  // .epoch_proto.EpochFolioDashboardWidget type = 1;
  void clear_type();
  ::epoch_proto::EpochFolioDashboardWidget type() const;
  void set_type(::epoch_proto::EpochFolioDashboardWidget value);
  private:
  ::epoch_proto::EpochFolioDashboardWidget _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioDashboardWidget value);
  public:

  // @@protoc_insertion_point(class_scope:epoch_proto.CardDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardData > data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    uint64_t group_size_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ColumnDef

// string id = 1;
inline void ColumnDef::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ColumnDef::id() const {
  // @@protoc_insertion_point(field_get:epoch_proto.ColumnDef.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnDef::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epoch_proto.ColumnDef.id)
}
inline std::string* ColumnDef::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ColumnDef.id)
  return _s;
}
inline const std::string& ColumnDef::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ColumnDef::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ColumnDef::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ColumnDef::release_id() {
  // @@protoc_insertion_point(field_release:epoch_proto.ColumnDef.id)
  return _impl_.id_.Release();
}
inline void ColumnDef::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ColumnDef.id)
}

// string name = 2;
inline void ColumnDef::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ColumnDef::name() const {
  // @@protoc_insertion_point(field_get:epoch_proto.ColumnDef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColumnDef::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epoch_proto.ColumnDef.name)
}
inline std::string* ColumnDef::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ColumnDef.name)
  return _s;
}
inline const std::string& ColumnDef::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ColumnDef::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ColumnDef::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ColumnDef::release_name() {
  // @@protoc_insertion_point(field_release:epoch_proto.ColumnDef.name)
  return _impl_.name_.Release();
}
inline void ColumnDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ColumnDef.name)
}

// .epoch_proto.EpochFolioType type = 3;
inline void ColumnDef::clear_type() {
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioType ColumnDef::_internal_type() const {
  return static_cast< ::epoch_proto::EpochFolioType >(_impl_.type_);
}
inline ::epoch_proto::EpochFolioType ColumnDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.ColumnDef.type)
  return _internal_type();
}
inline void ColumnDef::_internal_set_type(::epoch_proto::EpochFolioType value) {
  
  _impl_.type_ = value;
}
inline void ColumnDef::set_type(::epoch_proto::EpochFolioType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.ColumnDef.type)
}

// -------------------------------------------------------------------

// TableRow

// repeated .epoch_proto.Scalar values = 1;
inline int TableRow::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int TableRow::values_size() const {
  return _internal_values_size();
}
inline ::epoch_proto::Scalar* TableRow::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TableRow.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >*
TableRow::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TableRow.values)
  return &_impl_.values_;
}
inline const ::epoch_proto::Scalar& TableRow::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::epoch_proto::Scalar& TableRow::values(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.TableRow.values)
  return _internal_values(index);
}
inline ::epoch_proto::Scalar* TableRow::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::epoch_proto::Scalar* TableRow::add_values() {
  ::epoch_proto::Scalar* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:epoch_proto.TableRow.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >&
TableRow::values() const {
  // @@protoc_insertion_point(field_list:epoch_proto.TableRow.values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// TableData

// repeated .epoch_proto.TableRow rows = 1;
inline int TableData::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int TableData::rows_size() const {
  return _internal_rows_size();
}
inline void TableData::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::epoch_proto::TableRow* TableData::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TableData.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::TableRow >*
TableData::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TableData.rows)
  return &_impl_.rows_;
}
inline const ::epoch_proto::TableRow& TableData::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::epoch_proto::TableRow& TableData::rows(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.TableData.rows)
  return _internal_rows(index);
}
inline ::epoch_proto::TableRow* TableData::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::epoch_proto::TableRow* TableData::add_rows() {
  ::epoch_proto::TableRow* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:epoch_proto.TableData.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::TableRow >&
TableData::rows() const {
  // @@protoc_insertion_point(field_list:epoch_proto.TableData.rows)
  return _impl_.rows_;
}

// -------------------------------------------------------------------

// Table

// .epoch_proto.EpochFolioDashboardWidget type = 1;
inline void Table::clear_type() {
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioDashboardWidget Table::_internal_type() const {
  return static_cast< ::epoch_proto::EpochFolioDashboardWidget >(_impl_.type_);
}
inline ::epoch_proto::EpochFolioDashboardWidget Table::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.type)
  return _internal_type();
}
inline void Table::_internal_set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  
  _impl_.type_ = value;
}
inline void Table::set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Table.type)
}

// string category = 2;
inline void Table::clear_category() {
  _impl_.category_.ClearToEmpty();
}
inline const std::string& Table::category() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Table::set_category(ArgT0&& arg0, ArgT... args) {
 
 _impl_.category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epoch_proto.Table.category)
}
inline std::string* Table::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Table.category)
  return _s;
}
inline const std::string& Table::_internal_category() const {
  return _impl_.category_.Get();
}
inline void Table::_internal_set_category(const std::string& value) {
  
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* Table::_internal_mutable_category() {
  
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* Table::release_category() {
  // @@protoc_insertion_point(field_release:epoch_proto.Table.category)
  return _impl_.category_.Release();
}
inline void Table::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Table.category)
}

// string title = 3;
inline void Table::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Table::title() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Table::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epoch_proto.Table.title)
}
inline std::string* Table::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Table.title)
  return _s;
}
inline const std::string& Table::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Table::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Table::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Table::release_title() {
  // @@protoc_insertion_point(field_release:epoch_proto.Table.title)
  return _impl_.title_.Release();
}
inline void Table::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Table.title)
}

// repeated .epoch_proto.ColumnDef columns = 4;
inline int Table::_internal_columns_size() const {
  return _impl_.columns_.size();
}
inline int Table::columns_size() const {
  return _internal_columns_size();
}
inline void Table::clear_columns() {
  _impl_.columns_.Clear();
}
inline ::epoch_proto::ColumnDef* Table::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.Table.columns)
  return _impl_.columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::ColumnDef >*
Table::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.Table.columns)
  return &_impl_.columns_;
}
inline const ::epoch_proto::ColumnDef& Table::_internal_columns(int index) const {
  return _impl_.columns_.Get(index);
}
inline const ::epoch_proto::ColumnDef& Table::columns(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.columns)
  return _internal_columns(index);
}
inline ::epoch_proto::ColumnDef* Table::_internal_add_columns() {
  return _impl_.columns_.Add();
}
inline ::epoch_proto::ColumnDef* Table::add_columns() {
  ::epoch_proto::ColumnDef* _add = _internal_add_columns();
  // @@protoc_insertion_point(field_add:epoch_proto.Table.columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::ColumnDef >&
Table::columns() const {
  // @@protoc_insertion_point(field_list:epoch_proto.Table.columns)
  return _impl_.columns_;
}

// .epoch_proto.TableData data = 5;
inline bool Table::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool Table::has_data() const {
  return _internal_has_data();
}
inline void Table::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::epoch_proto::TableData& Table::_internal_data() const {
  const ::epoch_proto::TableData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TableData&>(
      ::epoch_proto::_TableData_default_instance_);
}
inline const ::epoch_proto::TableData& Table::data() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.data)
  return _internal_data();
}
inline void Table::unsafe_arena_set_allocated_data(
    ::epoch_proto::TableData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Table.data)
}
inline ::epoch_proto::TableData* Table::release_data() {
  
  ::epoch_proto::TableData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::epoch_proto::TableData* Table::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:epoch_proto.Table.data)
  
  ::epoch_proto::TableData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::epoch_proto::TableData* Table::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::epoch_proto::TableData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::epoch_proto::TableData* Table::mutable_data() {
  ::epoch_proto::TableData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Table.data)
  return _msg;
}
inline void Table::set_allocated_data(::epoch_proto::TableData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Table.data)
}

// -------------------------------------------------------------------

// CardData

// string title = 1;
inline void CardData::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CardData::title() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardData::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epoch_proto.CardData.title)
}
inline std::string* CardData::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardData.title)
  return _s;
}
inline const std::string& CardData::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CardData::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CardData::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CardData::release_title() {
  // @@protoc_insertion_point(field_release:epoch_proto.CardData.title)
  return _impl_.title_.Release();
}
inline void CardData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.CardData.title)
}

// .epoch_proto.Scalar value = 2;
inline bool CardData::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool CardData::has_value() const {
  return _internal_has_value();
}
inline const ::epoch_proto::Scalar& CardData::_internal_value() const {
  const ::epoch_proto::Scalar* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(
      ::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& CardData::value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.value)
  return _internal_value();
}
inline void CardData::unsafe_arena_set_allocated_value(
    ::epoch_proto::Scalar* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.CardData.value)
}
inline ::epoch_proto::Scalar* CardData::release_value() {
  
  ::epoch_proto::Scalar* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::epoch_proto::Scalar* CardData::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:epoch_proto.CardData.value)
  
  ::epoch_proto::Scalar* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* CardData::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::epoch_proto::Scalar>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::epoch_proto::Scalar* CardData::mutable_value() {
  ::epoch_proto::Scalar* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardData.value)
  return _msg;
}
inline void CardData::set_allocated_value(::epoch_proto::Scalar* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.CardData.value)
}

// .epoch_proto.EpochFolioType type = 3;
inline void CardData::clear_type() {
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioType CardData::_internal_type() const {
  return static_cast< ::epoch_proto::EpochFolioType >(_impl_.type_);
}
inline ::epoch_proto::EpochFolioType CardData::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.type)
  return _internal_type();
}
inline void CardData::_internal_set_type(::epoch_proto::EpochFolioType value) {
  
  _impl_.type_ = value;
}
inline void CardData::set_type(::epoch_proto::EpochFolioType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardData.type)
}

// uint64 group = 4;
inline void CardData::clear_group() {
  _impl_.group_ = uint64_t{0u};
}
inline uint64_t CardData::_internal_group() const {
  return _impl_.group_;
}
inline uint64_t CardData::group() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.group)
  return _internal_group();
}
inline void CardData::_internal_set_group(uint64_t value) {
  
  _impl_.group_ = value;
}
inline void CardData::set_group(uint64_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardData.group)
}

// -------------------------------------------------------------------

// CardDef

// .epoch_proto.EpochFolioDashboardWidget type = 1;
inline void CardDef::clear_type() {
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioDashboardWidget CardDef::_internal_type() const {
  return static_cast< ::epoch_proto::EpochFolioDashboardWidget >(_impl_.type_);
}
inline ::epoch_proto::EpochFolioDashboardWidget CardDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.type)
  return _internal_type();
}
inline void CardDef::_internal_set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  
  _impl_.type_ = value;
}
inline void CardDef::set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardDef.type)
}

// string category = 2;
inline void CardDef::clear_category() {
  _impl_.category_.ClearToEmpty();
}
inline const std::string& CardDef::category() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CardDef::set_category(ArgT0&& arg0, ArgT... args) {
 
 _impl_.category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epoch_proto.CardDef.category)
}
inline std::string* CardDef::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardDef.category)
  return _s;
}
inline const std::string& CardDef::_internal_category() const {
  return _impl_.category_.Get();
}
inline void CardDef::_internal_set_category(const std::string& value) {
  
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* CardDef::_internal_mutable_category() {
  
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* CardDef::release_category() {
  // @@protoc_insertion_point(field_release:epoch_proto.CardDef.category)
  return _impl_.category_.Release();
}
inline void CardDef::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.CardDef.category)
}

// repeated .epoch_proto.CardData data = 3;
inline int CardDef::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CardDef::data_size() const {
  return _internal_data_size();
}
inline void CardDef::clear_data() {
  _impl_.data_.Clear();
}
inline ::epoch_proto::CardData* CardDef::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardDef.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardData >*
CardDef::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.CardDef.data)
  return &_impl_.data_;
}
inline const ::epoch_proto::CardData& CardDef::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::epoch_proto::CardData& CardDef::data(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.data)
  return _internal_data(index);
}
inline ::epoch_proto::CardData* CardDef::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::epoch_proto::CardData* CardDef::add_data() {
  ::epoch_proto::CardData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:epoch_proto.CardDef.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardData >&
CardDef::data() const {
  // @@protoc_insertion_point(field_list:epoch_proto.CardDef.data)
  return _impl_.data_;
}

// uint64 group_size = 4;
inline void CardDef::clear_group_size() {
  _impl_.group_size_ = uint64_t{0u};
}
inline uint64_t CardDef::_internal_group_size() const {
  return _impl_.group_size_;
}
inline uint64_t CardDef::group_size() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.group_size)
  return _internal_group_size();
}
inline void CardDef::_internal_set_group_size(uint64_t value) {
  
  _impl_.group_size_ = value;
}
inline void CardDef::set_group_size(uint64_t value) {
  _internal_set_group_size(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardDef.group_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace epoch_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_table_5fdef_2eproto
