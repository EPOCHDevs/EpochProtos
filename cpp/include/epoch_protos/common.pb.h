// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace epoch_proto {
class Array;
struct ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class Scalar;
struct ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
}  // namespace epoch_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::epoch_proto::Array* Arena::CreateMaybeMessage<::epoch_proto::Array>(Arena*);
template<> ::epoch_proto::Scalar* Arena::CreateMaybeMessage<::epoch_proto::Scalar>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace epoch_proto {

enum EpochFolioDashboardWidget : int {
  WidgetUnspecified = 0,
  WidgetCard = 1,
  WidgetLines = 2,
  WidgetBar = 3,
  WidgetDataTable = 4,
  WidgetXRange = 5,
  WidgetHistogram = 6,
  WidgetPie = 7,
  WidgetHeatMap = 8,
  WidgetBoxPlot = 9,
  WidgetArea = 10,
  WidgetColumn = 11,
  EpochFolioDashboardWidget_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EpochFolioDashboardWidget_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EpochFolioDashboardWidget_IsValid(int value);
constexpr EpochFolioDashboardWidget EpochFolioDashboardWidget_MIN = WidgetUnspecified;
constexpr EpochFolioDashboardWidget EpochFolioDashboardWidget_MAX = WidgetColumn;
constexpr int EpochFolioDashboardWidget_ARRAYSIZE = EpochFolioDashboardWidget_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EpochFolioDashboardWidget_descriptor();
template<typename T>
inline const std::string& EpochFolioDashboardWidget_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EpochFolioDashboardWidget>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EpochFolioDashboardWidget_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EpochFolioDashboardWidget_descriptor(), enum_t_value);
}
inline bool EpochFolioDashboardWidget_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EpochFolioDashboardWidget* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EpochFolioDashboardWidget>(
    EpochFolioDashboardWidget_descriptor(), name, value);
}
enum EpochFolioType : int {
  TypeUnspecified = 0,
  TypeString = 1,
  TypeInteger = 2,
  TypeDecimal = 3,
  TypePercent = 4,
  TypeBoolean = 5,
  TypeDateTime = 6,
  TypeDate = 7,
  TypeDayDuration = 8,
  TypeMonetary = 9,
  TypeDuration = 10,
  EpochFolioType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EpochFolioType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EpochFolioType_IsValid(int value);
constexpr EpochFolioType EpochFolioType_MIN = TypeUnspecified;
constexpr EpochFolioType EpochFolioType_MAX = TypeDuration;
constexpr int EpochFolioType_ARRAYSIZE = EpochFolioType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EpochFolioType_descriptor();
template<typename T>
inline const std::string& EpochFolioType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EpochFolioType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EpochFolioType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EpochFolioType_descriptor(), enum_t_value);
}
inline bool EpochFolioType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EpochFolioType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EpochFolioType>(
    EpochFolioType_descriptor(), name, value);
}
enum AxisType : int {
  AxisUnspecified = 0,
  AxisLinear = 1,
  AxisLogarithmic = 2,
  AxisDateTime = 3,
  AxisCategory = 4,
  AxisType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AxisType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AxisType_IsValid(int value);
constexpr AxisType AxisType_MIN = AxisUnspecified;
constexpr AxisType AxisType_MAX = AxisCategory;
constexpr int AxisType_ARRAYSIZE = AxisType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AxisType_descriptor();
template<typename T>
inline const std::string& AxisType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AxisType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AxisType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AxisType_descriptor(), enum_t_value);
}
inline bool AxisType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AxisType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AxisType>(
    AxisType_descriptor(), name, value);
}
// ===================================================================

class Scalar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.Scalar) */ {
 public:
  inline Scalar() : Scalar(nullptr) {}
  ~Scalar() override;
  explicit PROTOBUF_CONSTEXPR Scalar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scalar(const Scalar& from);
  Scalar(Scalar&& from) noexcept
    : Scalar() {
    *this = ::std::move(from);
  }

  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scalar& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kIntegerValue = 2,
    kDecimalValue = 3,
    kPercentValue = 4,
    kBooleanValue = 5,
    kTimestampMs = 6,
    kDateValue = 7,
    kDayDuration = 8,
    kMonetaryValue = 9,
    kDurationMs = 10,
    kNullValue = 11,
    VALUE_NOT_SET = 0,
  };

  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
               &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scalar& a, Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scalar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scalar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scalar& from) {
    Scalar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.Scalar";
  }
  protected:
  explicit Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kIntegerValueFieldNumber = 2,
    kDecimalValueFieldNumber = 3,
    kPercentValueFieldNumber = 4,
    kBooleanValueFieldNumber = 5,
    kTimestampMsFieldNumber = 6,
    kDateValueFieldNumber = 7,
    kDayDurationFieldNumber = 8,
    kMonetaryValueFieldNumber = 9,
    kDurationMsFieldNumber = 10,
    kNullValueFieldNumber = 11,
  };
  // string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int64 integer_value = 2;
  bool has_integer_value() const;
  private:
  bool _internal_has_integer_value() const;
  public:
  void clear_integer_value();
  int64_t integer_value() const;
  void set_integer_value(int64_t value);
  private:
  int64_t _internal_integer_value() const;
  void _internal_set_integer_value(int64_t value);
  public:

  // double decimal_value = 3;
  bool has_decimal_value() const;
  private:
  bool _internal_has_decimal_value() const;
  public:
  void clear_decimal_value();
  double decimal_value() const;
  void set_decimal_value(double value);
  private:
  double _internal_decimal_value() const;
  void _internal_set_decimal_value(double value);
  public:

  // double percent_value = 4;
  bool has_percent_value() const;
  private:
  bool _internal_has_percent_value() const;
  public:
  void clear_percent_value();
  double percent_value() const;
  void set_percent_value(double value);
  private:
  double _internal_percent_value() const;
  void _internal_set_percent_value(double value);
  public:

  // bool boolean_value = 5;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // int64 timestamp_ms = 6;
  bool has_timestamp_ms() const;
  private:
  bool _internal_has_timestamp_ms() const;
  public:
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // int64 date_value = 7;
  bool has_date_value() const;
  private:
  bool _internal_has_date_value() const;
  public:
  void clear_date_value();
  int64_t date_value() const;
  void set_date_value(int64_t value);
  private:
  int64_t _internal_date_value() const;
  void _internal_set_date_value(int64_t value);
  public:

  // int32 day_duration = 8;
  bool has_day_duration() const;
  private:
  bool _internal_has_day_duration() const;
  public:
  void clear_day_duration();
  int32_t day_duration() const;
  void set_day_duration(int32_t value);
  private:
  int32_t _internal_day_duration() const;
  void _internal_set_day_duration(int32_t value);
  public:

  // double monetary_value = 9;
  bool has_monetary_value() const;
  private:
  bool _internal_has_monetary_value() const;
  public:
  void clear_monetary_value();
  double monetary_value() const;
  void set_monetary_value(double value);
  private:
  double _internal_monetary_value() const;
  void _internal_set_monetary_value(double value);
  public:

  // int64 duration_ms = 10;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  int64_t duration_ms() const;
  void set_duration_ms(int64_t value);
  private:
  int64_t _internal_duration_ms() const;
  void _internal_set_duration_ms(int64_t value);
  public:

  // .google.protobuf.NullValue null_value = 11;
  bool has_null_value() const;
  private:
  bool _internal_has_null_value() const;
  public:
  void clear_null_value();
  ::PROTOBUF_NAMESPACE_ID::NullValue null_value() const;
  void set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  ::PROTOBUF_NAMESPACE_ID::NullValue _internal_null_value() const;
  void _internal_set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.Scalar)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_integer_value();
  void set_has_decimal_value();
  void set_has_percent_value();
  void set_has_boolean_value();
  void set_has_timestamp_ms();
  void set_has_date_value();
  void set_has_day_duration();
  void set_has_monetary_value();
  void set_has_duration_ms();
  void set_has_null_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      int64_t integer_value_;
      double decimal_value_;
      double percent_value_;
      bool boolean_value_;
      int64_t timestamp_ms_;
      int64_t date_value_;
      int32_t day_duration_;
      double monetary_value_;
      int64_t duration_ms_;
      int null_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Array final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.Array) */ {
 public:
  inline Array() : Array(nullptr) {}
  ~Array() override;
  explicit PROTOBUF_CONSTEXPR Array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Array(const Array& from);
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Array* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Array>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Array& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Array& from) {
    Array::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.Array";
  }
  protected:
  explicit Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .epoch_proto.Scalar values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::epoch_proto::Scalar* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >*
      mutable_values();
  private:
  const ::epoch_proto::Scalar& _internal_values(int index) const;
  ::epoch_proto::Scalar* _internal_add_values();
  public:
  const ::epoch_proto::Scalar& values(int index) const;
  ::epoch_proto::Scalar* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >&
      values() const;

  // @@protoc_insertion_point(class_scope:epoch_proto.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scalar

// string string_value = 1;
inline bool Scalar::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Scalar::has_string_value() const {
  return _internal_has_string_value();
}
inline void Scalar::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void Scalar::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Scalar::string_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Scalar::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.string_value)
}
inline std::string* Scalar::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Scalar.string_value)
  return _s;
}
inline const std::string& Scalar::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Scalar::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Scalar::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Scalar::release_string_value() {
  // @@protoc_insertion_point(field_release:epoch_proto.Scalar.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Scalar::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Scalar.string_value)
}

// int64 integer_value = 2;
inline bool Scalar::_internal_has_integer_value() const {
  return value_case() == kIntegerValue;
}
inline bool Scalar::has_integer_value() const {
  return _internal_has_integer_value();
}
inline void Scalar::set_has_integer_value() {
  _impl_._oneof_case_[0] = kIntegerValue;
}
inline void Scalar::clear_integer_value() {
  if (_internal_has_integer_value()) {
    _impl_.value_.integer_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Scalar::_internal_integer_value() const {
  if (_internal_has_integer_value()) {
    return _impl_.value_.integer_value_;
  }
  return int64_t{0};
}
inline void Scalar::_internal_set_integer_value(int64_t value) {
  if (!_internal_has_integer_value()) {
    clear_value();
    set_has_integer_value();
  }
  _impl_.value_.integer_value_ = value;
}
inline int64_t Scalar::integer_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.integer_value)
  return _internal_integer_value();
}
inline void Scalar::set_integer_value(int64_t value) {
  _internal_set_integer_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.integer_value)
}

// double decimal_value = 3;
inline bool Scalar::_internal_has_decimal_value() const {
  return value_case() == kDecimalValue;
}
inline bool Scalar::has_decimal_value() const {
  return _internal_has_decimal_value();
}
inline void Scalar::set_has_decimal_value() {
  _impl_._oneof_case_[0] = kDecimalValue;
}
inline void Scalar::clear_decimal_value() {
  if (_internal_has_decimal_value()) {
    _impl_.value_.decimal_value_ = 0;
    clear_has_value();
  }
}
inline double Scalar::_internal_decimal_value() const {
  if (_internal_has_decimal_value()) {
    return _impl_.value_.decimal_value_;
  }
  return 0;
}
inline void Scalar::_internal_set_decimal_value(double value) {
  if (!_internal_has_decimal_value()) {
    clear_value();
    set_has_decimal_value();
  }
  _impl_.value_.decimal_value_ = value;
}
inline double Scalar::decimal_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.decimal_value)
  return _internal_decimal_value();
}
inline void Scalar::set_decimal_value(double value) {
  _internal_set_decimal_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.decimal_value)
}

// double percent_value = 4;
inline bool Scalar::_internal_has_percent_value() const {
  return value_case() == kPercentValue;
}
inline bool Scalar::has_percent_value() const {
  return _internal_has_percent_value();
}
inline void Scalar::set_has_percent_value() {
  _impl_._oneof_case_[0] = kPercentValue;
}
inline void Scalar::clear_percent_value() {
  if (_internal_has_percent_value()) {
    _impl_.value_.percent_value_ = 0;
    clear_has_value();
  }
}
inline double Scalar::_internal_percent_value() const {
  if (_internal_has_percent_value()) {
    return _impl_.value_.percent_value_;
  }
  return 0;
}
inline void Scalar::_internal_set_percent_value(double value) {
  if (!_internal_has_percent_value()) {
    clear_value();
    set_has_percent_value();
  }
  _impl_.value_.percent_value_ = value;
}
inline double Scalar::percent_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.percent_value)
  return _internal_percent_value();
}
inline void Scalar::set_percent_value(double value) {
  _internal_set_percent_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.percent_value)
}

// bool boolean_value = 5;
inline bool Scalar::_internal_has_boolean_value() const {
  return value_case() == kBooleanValue;
}
inline bool Scalar::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void Scalar::set_has_boolean_value() {
  _impl_._oneof_case_[0] = kBooleanValue;
}
inline void Scalar::clear_boolean_value() {
  if (_internal_has_boolean_value()) {
    _impl_.value_.boolean_value_ = false;
    clear_has_value();
  }
}
inline bool Scalar::_internal_boolean_value() const {
  if (_internal_has_boolean_value()) {
    return _impl_.value_.boolean_value_;
  }
  return false;
}
inline void Scalar::_internal_set_boolean_value(bool value) {
  if (!_internal_has_boolean_value()) {
    clear_value();
    set_has_boolean_value();
  }
  _impl_.value_.boolean_value_ = value;
}
inline bool Scalar::boolean_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.boolean_value)
  return _internal_boolean_value();
}
inline void Scalar::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.boolean_value)
}

// int64 timestamp_ms = 6;
inline bool Scalar::_internal_has_timestamp_ms() const {
  return value_case() == kTimestampMs;
}
inline bool Scalar::has_timestamp_ms() const {
  return _internal_has_timestamp_ms();
}
inline void Scalar::set_has_timestamp_ms() {
  _impl_._oneof_case_[0] = kTimestampMs;
}
inline void Scalar::clear_timestamp_ms() {
  if (_internal_has_timestamp_ms()) {
    _impl_.value_.timestamp_ms_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Scalar::_internal_timestamp_ms() const {
  if (_internal_has_timestamp_ms()) {
    return _impl_.value_.timestamp_ms_;
  }
  return int64_t{0};
}
inline void Scalar::_internal_set_timestamp_ms(int64_t value) {
  if (!_internal_has_timestamp_ms()) {
    clear_value();
    set_has_timestamp_ms();
  }
  _impl_.value_.timestamp_ms_ = value;
}
inline int64_t Scalar::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void Scalar::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.timestamp_ms)
}

// int64 date_value = 7;
inline bool Scalar::_internal_has_date_value() const {
  return value_case() == kDateValue;
}
inline bool Scalar::has_date_value() const {
  return _internal_has_date_value();
}
inline void Scalar::set_has_date_value() {
  _impl_._oneof_case_[0] = kDateValue;
}
inline void Scalar::clear_date_value() {
  if (_internal_has_date_value()) {
    _impl_.value_.date_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Scalar::_internal_date_value() const {
  if (_internal_has_date_value()) {
    return _impl_.value_.date_value_;
  }
  return int64_t{0};
}
inline void Scalar::_internal_set_date_value(int64_t value) {
  if (!_internal_has_date_value()) {
    clear_value();
    set_has_date_value();
  }
  _impl_.value_.date_value_ = value;
}
inline int64_t Scalar::date_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.date_value)
  return _internal_date_value();
}
inline void Scalar::set_date_value(int64_t value) {
  _internal_set_date_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.date_value)
}

// int32 day_duration = 8;
inline bool Scalar::_internal_has_day_duration() const {
  return value_case() == kDayDuration;
}
inline bool Scalar::has_day_duration() const {
  return _internal_has_day_duration();
}
inline void Scalar::set_has_day_duration() {
  _impl_._oneof_case_[0] = kDayDuration;
}
inline void Scalar::clear_day_duration() {
  if (_internal_has_day_duration()) {
    _impl_.value_.day_duration_ = 0;
    clear_has_value();
  }
}
inline int32_t Scalar::_internal_day_duration() const {
  if (_internal_has_day_duration()) {
    return _impl_.value_.day_duration_;
  }
  return 0;
}
inline void Scalar::_internal_set_day_duration(int32_t value) {
  if (!_internal_has_day_duration()) {
    clear_value();
    set_has_day_duration();
  }
  _impl_.value_.day_duration_ = value;
}
inline int32_t Scalar::day_duration() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.day_duration)
  return _internal_day_duration();
}
inline void Scalar::set_day_duration(int32_t value) {
  _internal_set_day_duration(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.day_duration)
}

// double monetary_value = 9;
inline bool Scalar::_internal_has_monetary_value() const {
  return value_case() == kMonetaryValue;
}
inline bool Scalar::has_monetary_value() const {
  return _internal_has_monetary_value();
}
inline void Scalar::set_has_monetary_value() {
  _impl_._oneof_case_[0] = kMonetaryValue;
}
inline void Scalar::clear_monetary_value() {
  if (_internal_has_monetary_value()) {
    _impl_.value_.monetary_value_ = 0;
    clear_has_value();
  }
}
inline double Scalar::_internal_monetary_value() const {
  if (_internal_has_monetary_value()) {
    return _impl_.value_.monetary_value_;
  }
  return 0;
}
inline void Scalar::_internal_set_monetary_value(double value) {
  if (!_internal_has_monetary_value()) {
    clear_value();
    set_has_monetary_value();
  }
  _impl_.value_.monetary_value_ = value;
}
inline double Scalar::monetary_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.monetary_value)
  return _internal_monetary_value();
}
inline void Scalar::set_monetary_value(double value) {
  _internal_set_monetary_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.monetary_value)
}

// int64 duration_ms = 10;
inline bool Scalar::_internal_has_duration_ms() const {
  return value_case() == kDurationMs;
}
inline bool Scalar::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void Scalar::set_has_duration_ms() {
  _impl_._oneof_case_[0] = kDurationMs;
}
inline void Scalar::clear_duration_ms() {
  if (_internal_has_duration_ms()) {
    _impl_.value_.duration_ms_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Scalar::_internal_duration_ms() const {
  if (_internal_has_duration_ms()) {
    return _impl_.value_.duration_ms_;
  }
  return int64_t{0};
}
inline void Scalar::_internal_set_duration_ms(int64_t value) {
  if (!_internal_has_duration_ms()) {
    clear_value();
    set_has_duration_ms();
  }
  _impl_.value_.duration_ms_ = value;
}
inline int64_t Scalar::duration_ms() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.duration_ms)
  return _internal_duration_ms();
}
inline void Scalar::set_duration_ms(int64_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.duration_ms)
}

// .google.protobuf.NullValue null_value = 11;
inline bool Scalar::_internal_has_null_value() const {
  return value_case() == kNullValue;
}
inline bool Scalar::has_null_value() const {
  return _internal_has_null_value();
}
inline void Scalar::set_has_null_value() {
  _impl_._oneof_case_[0] = kNullValue;
}
inline void Scalar::clear_null_value() {
  if (_internal_has_null_value()) {
    _impl_.value_.null_value_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Scalar::_internal_null_value() const {
  if (_internal_has_null_value()) {
    return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(_impl_.value_.null_value_);
  }
  return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Scalar::null_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.null_value)
  return _internal_null_value();
}
inline void Scalar::_internal_set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null_value()) {
    clear_value();
    set_has_null_value();
  }
  _impl_.value_.null_value_ = value;
}
inline void Scalar::set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  _internal_set_null_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.null_value)
}

inline bool Scalar::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Scalar::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Scalar::ValueCase Scalar::value_case() const {
  return Scalar::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Array

// repeated .epoch_proto.Scalar values = 1;
inline int Array::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int Array::values_size() const {
  return _internal_values_size();
}
inline void Array::clear_values() {
  _impl_.values_.Clear();
}
inline ::epoch_proto::Scalar* Array::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.Array.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >*
Array::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.Array.values)
  return &_impl_.values_;
}
inline const ::epoch_proto::Scalar& Array::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::epoch_proto::Scalar& Array::values(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.Array.values)
  return _internal_values(index);
}
inline ::epoch_proto::Scalar* Array::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::epoch_proto::Scalar* Array::add_values() {
  ::epoch_proto::Scalar* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:epoch_proto.Array.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Scalar >&
Array::values() const {
  // @@protoc_insertion_point(field_list:epoch_proto.Array.values)
  return _impl_.values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace epoch_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::epoch_proto::EpochFolioDashboardWidget> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epoch_proto::EpochFolioDashboardWidget>() {
  return ::epoch_proto::EpochFolioDashboardWidget_descriptor();
}
template <> struct is_proto_enum< ::epoch_proto::EpochFolioType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epoch_proto::EpochFolioType>() {
  return ::epoch_proto::EpochFolioType_descriptor();
}
template <> struct is_proto_enum< ::epoch_proto::AxisType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epoch_proto::AxisType>() {
  return ::epoch_proto::AxisType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
