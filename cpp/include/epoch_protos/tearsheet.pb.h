// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tearsheet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tearsheet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tearsheet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "table_def.pb.h"
#include "chart_def.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tearsheet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tearsheet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tearsheet_2eproto;
namespace epoch_proto {
class CardDefList;
struct CardDefListDefaultTypeInternal;
extern CardDefListDefaultTypeInternal _CardDefList_default_instance_;
class ChartList;
struct ChartListDefaultTypeInternal;
extern ChartListDefaultTypeInternal _ChartList_default_instance_;
class FullTearSheet;
struct FullTearSheetDefaultTypeInternal;
extern FullTearSheetDefaultTypeInternal _FullTearSheet_default_instance_;
class FullTearSheet_CategoriesEntry_DoNotUse;
struct FullTearSheet_CategoriesEntry_DoNotUseDefaultTypeInternal;
extern FullTearSheet_CategoriesEntry_DoNotUseDefaultTypeInternal _FullTearSheet_CategoriesEntry_DoNotUse_default_instance_;
class TableList;
struct TableListDefaultTypeInternal;
extern TableListDefaultTypeInternal _TableList_default_instance_;
class TearSheet;
struct TearSheetDefaultTypeInternal;
extern TearSheetDefaultTypeInternal _TearSheet_default_instance_;
}  // namespace epoch_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::epoch_proto::CardDefList* Arena::CreateMaybeMessage<::epoch_proto::CardDefList>(Arena*);
template<> ::epoch_proto::ChartList* Arena::CreateMaybeMessage<::epoch_proto::ChartList>(Arena*);
template<> ::epoch_proto::FullTearSheet* Arena::CreateMaybeMessage<::epoch_proto::FullTearSheet>(Arena*);
template<> ::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse* Arena::CreateMaybeMessage<::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse>(Arena*);
template<> ::epoch_proto::TableList* Arena::CreateMaybeMessage<::epoch_proto::TableList>(Arena*);
template<> ::epoch_proto::TearSheet* Arena::CreateMaybeMessage<::epoch_proto::TearSheet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace epoch_proto {

// ===================================================================

class CardDefList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.CardDefList) */ {
 public:
  inline CardDefList() : CardDefList(nullptr) {}
  ~CardDefList() override;
  explicit PROTOBUF_CONSTEXPR CardDefList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardDefList(const CardDefList& from);
  CardDefList(CardDefList&& from) noexcept
    : CardDefList() {
    *this = ::std::move(from);
  }

  inline CardDefList& operator=(const CardDefList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardDefList& operator=(CardDefList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardDefList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardDefList* internal_default_instance() {
    return reinterpret_cast<const CardDefList*>(
               &_CardDefList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardDefList& a, CardDefList& b) {
    a.Swap(&b);
  }
  inline void Swap(CardDefList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardDefList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardDefList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CardDefList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardDefList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CardDefList& from) {
    CardDefList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardDefList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.CardDefList";
  }
  protected:
  explicit CardDefList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
  };
  // repeated .epoch_proto.CardDef cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::epoch_proto::CardDef* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardDef >*
      mutable_cards();
  private:
  const ::epoch_proto::CardDef& _internal_cards(int index) const;
  ::epoch_proto::CardDef* _internal_add_cards();
  public:
  const ::epoch_proto::CardDef& cards(int index) const;
  ::epoch_proto::CardDef* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardDef >&
      cards() const;

  // @@protoc_insertion_point(class_scope:epoch_proto.CardDefList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardDef > cards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tearsheet_2eproto;
};
// -------------------------------------------------------------------

class ChartList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.ChartList) */ {
 public:
  inline ChartList() : ChartList(nullptr) {}
  ~ChartList() override;
  explicit PROTOBUF_CONSTEXPR ChartList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartList(const ChartList& from);
  ChartList(ChartList&& from) noexcept
    : ChartList() {
    *this = ::std::move(from);
  }

  inline ChartList& operator=(const ChartList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartList& operator=(ChartList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartList* internal_default_instance() {
    return reinterpret_cast<const ChartList*>(
               &_ChartList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChartList& a, ChartList& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartList& from) {
    ChartList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.ChartList";
  }
  protected:
  explicit ChartList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartsFieldNumber = 1,
  };
  // repeated .epoch_proto.Chart charts = 1;
  int charts_size() const;
  private:
  int _internal_charts_size() const;
  public:
  void clear_charts();
  ::epoch_proto::Chart* mutable_charts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Chart >*
      mutable_charts();
  private:
  const ::epoch_proto::Chart& _internal_charts(int index) const;
  ::epoch_proto::Chart* _internal_add_charts();
  public:
  const ::epoch_proto::Chart& charts(int index) const;
  ::epoch_proto::Chart* add_charts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Chart >&
      charts() const;

  // @@protoc_insertion_point(class_scope:epoch_proto.ChartList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Chart > charts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tearsheet_2eproto;
};
// -------------------------------------------------------------------

class TableList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.TableList) */ {
 public:
  inline TableList() : TableList(nullptr) {}
  ~TableList() override;
  explicit PROTOBUF_CONSTEXPR TableList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableList(const TableList& from);
  TableList(TableList&& from) noexcept
    : TableList() {
    *this = ::std::move(from);
  }

  inline TableList& operator=(const TableList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableList& operator=(TableList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableList* internal_default_instance() {
    return reinterpret_cast<const TableList*>(
               &_TableList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TableList& a, TableList& b) {
    a.Swap(&b);
  }
  inline void Swap(TableList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableList& from) {
    TableList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.TableList";
  }
  protected:
  explicit TableList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 1,
  };
  // repeated .epoch_proto.Table tables = 1;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::epoch_proto::Table* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Table >*
      mutable_tables();
  private:
  const ::epoch_proto::Table& _internal_tables(int index) const;
  ::epoch_proto::Table* _internal_add_tables();
  public:
  const ::epoch_proto::Table& tables(int index) const;
  ::epoch_proto::Table* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Table >&
      tables() const;

  // @@protoc_insertion_point(class_scope:epoch_proto.TableList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Table > tables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tearsheet_2eproto;
};
// -------------------------------------------------------------------

class TearSheet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.TearSheet) */ {
 public:
  inline TearSheet() : TearSheet(nullptr) {}
  ~TearSheet() override;
  explicit PROTOBUF_CONSTEXPR TearSheet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TearSheet(const TearSheet& from);
  TearSheet(TearSheet&& from) noexcept
    : TearSheet() {
    *this = ::std::move(from);
  }

  inline TearSheet& operator=(const TearSheet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TearSheet& operator=(TearSheet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TearSheet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TearSheet* internal_default_instance() {
    return reinterpret_cast<const TearSheet*>(
               &_TearSheet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TearSheet& a, TearSheet& b) {
    a.Swap(&b);
  }
  inline void Swap(TearSheet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TearSheet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TearSheet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TearSheet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TearSheet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TearSheet& from) {
    TearSheet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TearSheet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.TearSheet";
  }
  protected:
  explicit TearSheet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
    kChartsFieldNumber = 2,
    kTablesFieldNumber = 3,
  };
  // .epoch_proto.CardDefList cards = 1;
  bool has_cards() const;
  private:
  bool _internal_has_cards() const;
  public:
  void clear_cards();
  const ::epoch_proto::CardDefList& cards() const;
  PROTOBUF_NODISCARD ::epoch_proto::CardDefList* release_cards();
  ::epoch_proto::CardDefList* mutable_cards();
  void set_allocated_cards(::epoch_proto::CardDefList* cards);
  private:
  const ::epoch_proto::CardDefList& _internal_cards() const;
  ::epoch_proto::CardDefList* _internal_mutable_cards();
  public:
  void unsafe_arena_set_allocated_cards(
      ::epoch_proto::CardDefList* cards);
  ::epoch_proto::CardDefList* unsafe_arena_release_cards();

  // .epoch_proto.ChartList charts = 2;
  bool has_charts() const;
  private:
  bool _internal_has_charts() const;
  public:
  void clear_charts();
  const ::epoch_proto::ChartList& charts() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartList* release_charts();
  ::epoch_proto::ChartList* mutable_charts();
  void set_allocated_charts(::epoch_proto::ChartList* charts);
  private:
  const ::epoch_proto::ChartList& _internal_charts() const;
  ::epoch_proto::ChartList* _internal_mutable_charts();
  public:
  void unsafe_arena_set_allocated_charts(
      ::epoch_proto::ChartList* charts);
  ::epoch_proto::ChartList* unsafe_arena_release_charts();

  // .epoch_proto.TableList tables = 3;
  bool has_tables() const;
  private:
  bool _internal_has_tables() const;
  public:
  void clear_tables();
  const ::epoch_proto::TableList& tables() const;
  PROTOBUF_NODISCARD ::epoch_proto::TableList* release_tables();
  ::epoch_proto::TableList* mutable_tables();
  void set_allocated_tables(::epoch_proto::TableList* tables);
  private:
  const ::epoch_proto::TableList& _internal_tables() const;
  ::epoch_proto::TableList* _internal_mutable_tables();
  public:
  void unsafe_arena_set_allocated_tables(
      ::epoch_proto::TableList* tables);
  ::epoch_proto::TableList* unsafe_arena_release_tables();

  // @@protoc_insertion_point(class_scope:epoch_proto.TearSheet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::epoch_proto::CardDefList* cards_;
    ::epoch_proto::ChartList* charts_;
    ::epoch_proto::TableList* tables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tearsheet_2eproto;
};
// -------------------------------------------------------------------

class FullTearSheet_CategoriesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FullTearSheet_CategoriesEntry_DoNotUse, 
    std::string, ::epoch_proto::TearSheet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FullTearSheet_CategoriesEntry_DoNotUse, 
    std::string, ::epoch_proto::TearSheet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FullTearSheet_CategoriesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FullTearSheet_CategoriesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FullTearSheet_CategoriesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FullTearSheet_CategoriesEntry_DoNotUse& other);
  static const FullTearSheet_CategoriesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FullTearSheet_CategoriesEntry_DoNotUse*>(&_FullTearSheet_CategoriesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "epoch_proto.FullTearSheet.CategoriesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tearsheet_2eproto;
};

// -------------------------------------------------------------------

class FullTearSheet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epoch_proto.FullTearSheet) */ {
 public:
  inline FullTearSheet() : FullTearSheet(nullptr) {}
  ~FullTearSheet() override;
  explicit PROTOBUF_CONSTEXPR FullTearSheet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullTearSheet(const FullTearSheet& from);
  FullTearSheet(FullTearSheet&& from) noexcept
    : FullTearSheet() {
    *this = ::std::move(from);
  }

  inline FullTearSheet& operator=(const FullTearSheet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullTearSheet& operator=(FullTearSheet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullTearSheet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullTearSheet* internal_default_instance() {
    return reinterpret_cast<const FullTearSheet*>(
               &_FullTearSheet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FullTearSheet& a, FullTearSheet& b) {
    a.Swap(&b);
  }
  inline void Swap(FullTearSheet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullTearSheet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullTearSheet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullTearSheet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FullTearSheet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FullTearSheet& from) {
    FullTearSheet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullTearSheet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epoch_proto.FullTearSheet";
  }
  protected:
  explicit FullTearSheet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 1,
  };
  // map<string, .epoch_proto.TearSheet> categories = 1;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >&
      _internal_categories() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >*
      _internal_mutable_categories();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >&
      categories() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >*
      mutable_categories();

  // @@protoc_insertion_point(class_scope:epoch_proto.FullTearSheet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FullTearSheet_CategoriesEntry_DoNotUse,
        std::string, ::epoch_proto::TearSheet,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> categories_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tearsheet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardDefList

// repeated .epoch_proto.CardDef cards = 1;
inline int CardDefList::_internal_cards_size() const {
  return _impl_.cards_.size();
}
inline int CardDefList::cards_size() const {
  return _internal_cards_size();
}
inline ::epoch_proto::CardDef* CardDefList::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardDefList.cards)
  return _impl_.cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardDef >*
CardDefList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.CardDefList.cards)
  return &_impl_.cards_;
}
inline const ::epoch_proto::CardDef& CardDefList::_internal_cards(int index) const {
  return _impl_.cards_.Get(index);
}
inline const ::epoch_proto::CardDef& CardDefList::cards(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDefList.cards)
  return _internal_cards(index);
}
inline ::epoch_proto::CardDef* CardDefList::_internal_add_cards() {
  return _impl_.cards_.Add();
}
inline ::epoch_proto::CardDef* CardDefList::add_cards() {
  ::epoch_proto::CardDef* _add = _internal_add_cards();
  // @@protoc_insertion_point(field_add:epoch_proto.CardDefList.cards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::CardDef >&
CardDefList::cards() const {
  // @@protoc_insertion_point(field_list:epoch_proto.CardDefList.cards)
  return _impl_.cards_;
}

// -------------------------------------------------------------------

// ChartList

// repeated .epoch_proto.Chart charts = 1;
inline int ChartList::_internal_charts_size() const {
  return _impl_.charts_.size();
}
inline int ChartList::charts_size() const {
  return _internal_charts_size();
}
inline ::epoch_proto::Chart* ChartList::mutable_charts(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.ChartList.charts)
  return _impl_.charts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Chart >*
ChartList::mutable_charts() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.ChartList.charts)
  return &_impl_.charts_;
}
inline const ::epoch_proto::Chart& ChartList::_internal_charts(int index) const {
  return _impl_.charts_.Get(index);
}
inline const ::epoch_proto::Chart& ChartList::charts(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.ChartList.charts)
  return _internal_charts(index);
}
inline ::epoch_proto::Chart* ChartList::_internal_add_charts() {
  return _impl_.charts_.Add();
}
inline ::epoch_proto::Chart* ChartList::add_charts() {
  ::epoch_proto::Chart* _add = _internal_add_charts();
  // @@protoc_insertion_point(field_add:epoch_proto.ChartList.charts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Chart >&
ChartList::charts() const {
  // @@protoc_insertion_point(field_list:epoch_proto.ChartList.charts)
  return _impl_.charts_;
}

// -------------------------------------------------------------------

// TableList

// repeated .epoch_proto.Table tables = 1;
inline int TableList::_internal_tables_size() const {
  return _impl_.tables_.size();
}
inline int TableList::tables_size() const {
  return _internal_tables_size();
}
inline ::epoch_proto::Table* TableList::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TableList.tables)
  return _impl_.tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Table >*
TableList::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TableList.tables)
  return &_impl_.tables_;
}
inline const ::epoch_proto::Table& TableList::_internal_tables(int index) const {
  return _impl_.tables_.Get(index);
}
inline const ::epoch_proto::Table& TableList::tables(int index) const {
  // @@protoc_insertion_point(field_get:epoch_proto.TableList.tables)
  return _internal_tables(index);
}
inline ::epoch_proto::Table* TableList::_internal_add_tables() {
  return _impl_.tables_.Add();
}
inline ::epoch_proto::Table* TableList::add_tables() {
  ::epoch_proto::Table* _add = _internal_add_tables();
  // @@protoc_insertion_point(field_add:epoch_proto.TableList.tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epoch_proto::Table >&
TableList::tables() const {
  // @@protoc_insertion_point(field_list:epoch_proto.TableList.tables)
  return _impl_.tables_;
}

// -------------------------------------------------------------------

// TearSheet

// .epoch_proto.CardDefList cards = 1;
inline bool TearSheet::_internal_has_cards() const {
  return this != internal_default_instance() && _impl_.cards_ != nullptr;
}
inline bool TearSheet::has_cards() const {
  return _internal_has_cards();
}
inline void TearSheet::clear_cards() {
  if (GetArenaForAllocation() == nullptr && _impl_.cards_ != nullptr) {
    delete _impl_.cards_;
  }
  _impl_.cards_ = nullptr;
}
inline const ::epoch_proto::CardDefList& TearSheet::_internal_cards() const {
  const ::epoch_proto::CardDefList* p = _impl_.cards_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::CardDefList&>(
      ::epoch_proto::_CardDefList_default_instance_);
}
inline const ::epoch_proto::CardDefList& TearSheet::cards() const {
  // @@protoc_insertion_point(field_get:epoch_proto.TearSheet.cards)
  return _internal_cards();
}
inline void TearSheet::unsafe_arena_set_allocated_cards(
    ::epoch_proto::CardDefList* cards) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cards_);
  }
  _impl_.cards_ = cards;
  if (cards) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.TearSheet.cards)
}
inline ::epoch_proto::CardDefList* TearSheet::release_cards() {
  
  ::epoch_proto::CardDefList* temp = _impl_.cards_;
  _impl_.cards_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::epoch_proto::CardDefList* TearSheet::unsafe_arena_release_cards() {
  // @@protoc_insertion_point(field_release:epoch_proto.TearSheet.cards)
  
  ::epoch_proto::CardDefList* temp = _impl_.cards_;
  _impl_.cards_ = nullptr;
  return temp;
}
inline ::epoch_proto::CardDefList* TearSheet::_internal_mutable_cards() {
  
  if (_impl_.cards_ == nullptr) {
    auto* p = CreateMaybeMessage<::epoch_proto::CardDefList>(GetArenaForAllocation());
    _impl_.cards_ = p;
  }
  return _impl_.cards_;
}
inline ::epoch_proto::CardDefList* TearSheet::mutable_cards() {
  ::epoch_proto::CardDefList* _msg = _internal_mutable_cards();
  // @@protoc_insertion_point(field_mutable:epoch_proto.TearSheet.cards)
  return _msg;
}
inline void TearSheet::set_allocated_cards(::epoch_proto::CardDefList* cards) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cards_;
  }
  if (cards) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cards);
    if (message_arena != submessage_arena) {
      cards = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cards, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cards_ = cards;
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.TearSheet.cards)
}

// .epoch_proto.ChartList charts = 2;
inline bool TearSheet::_internal_has_charts() const {
  return this != internal_default_instance() && _impl_.charts_ != nullptr;
}
inline bool TearSheet::has_charts() const {
  return _internal_has_charts();
}
inline void TearSheet::clear_charts() {
  if (GetArenaForAllocation() == nullptr && _impl_.charts_ != nullptr) {
    delete _impl_.charts_;
  }
  _impl_.charts_ = nullptr;
}
inline const ::epoch_proto::ChartList& TearSheet::_internal_charts() const {
  const ::epoch_proto::ChartList* p = _impl_.charts_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartList&>(
      ::epoch_proto::_ChartList_default_instance_);
}
inline const ::epoch_proto::ChartList& TearSheet::charts() const {
  // @@protoc_insertion_point(field_get:epoch_proto.TearSheet.charts)
  return _internal_charts();
}
inline void TearSheet::unsafe_arena_set_allocated_charts(
    ::epoch_proto::ChartList* charts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.charts_);
  }
  _impl_.charts_ = charts;
  if (charts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.TearSheet.charts)
}
inline ::epoch_proto::ChartList* TearSheet::release_charts() {
  
  ::epoch_proto::ChartList* temp = _impl_.charts_;
  _impl_.charts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::epoch_proto::ChartList* TearSheet::unsafe_arena_release_charts() {
  // @@protoc_insertion_point(field_release:epoch_proto.TearSheet.charts)
  
  ::epoch_proto::ChartList* temp = _impl_.charts_;
  _impl_.charts_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartList* TearSheet::_internal_mutable_charts() {
  
  if (_impl_.charts_ == nullptr) {
    auto* p = CreateMaybeMessage<::epoch_proto::ChartList>(GetArenaForAllocation());
    _impl_.charts_ = p;
  }
  return _impl_.charts_;
}
inline ::epoch_proto::ChartList* TearSheet::mutable_charts() {
  ::epoch_proto::ChartList* _msg = _internal_mutable_charts();
  // @@protoc_insertion_point(field_mutable:epoch_proto.TearSheet.charts)
  return _msg;
}
inline void TearSheet::set_allocated_charts(::epoch_proto::ChartList* charts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.charts_;
  }
  if (charts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(charts);
    if (message_arena != submessage_arena) {
      charts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.charts_ = charts;
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.TearSheet.charts)
}

// .epoch_proto.TableList tables = 3;
inline bool TearSheet::_internal_has_tables() const {
  return this != internal_default_instance() && _impl_.tables_ != nullptr;
}
inline bool TearSheet::has_tables() const {
  return _internal_has_tables();
}
inline void TearSheet::clear_tables() {
  if (GetArenaForAllocation() == nullptr && _impl_.tables_ != nullptr) {
    delete _impl_.tables_;
  }
  _impl_.tables_ = nullptr;
}
inline const ::epoch_proto::TableList& TearSheet::_internal_tables() const {
  const ::epoch_proto::TableList* p = _impl_.tables_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TableList&>(
      ::epoch_proto::_TableList_default_instance_);
}
inline const ::epoch_proto::TableList& TearSheet::tables() const {
  // @@protoc_insertion_point(field_get:epoch_proto.TearSheet.tables)
  return _internal_tables();
}
inline void TearSheet::unsafe_arena_set_allocated_tables(
    ::epoch_proto::TableList* tables) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tables_);
  }
  _impl_.tables_ = tables;
  if (tables) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.TearSheet.tables)
}
inline ::epoch_proto::TableList* TearSheet::release_tables() {
  
  ::epoch_proto::TableList* temp = _impl_.tables_;
  _impl_.tables_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::epoch_proto::TableList* TearSheet::unsafe_arena_release_tables() {
  // @@protoc_insertion_point(field_release:epoch_proto.TearSheet.tables)
  
  ::epoch_proto::TableList* temp = _impl_.tables_;
  _impl_.tables_ = nullptr;
  return temp;
}
inline ::epoch_proto::TableList* TearSheet::_internal_mutable_tables() {
  
  if (_impl_.tables_ == nullptr) {
    auto* p = CreateMaybeMessage<::epoch_proto::TableList>(GetArenaForAllocation());
    _impl_.tables_ = p;
  }
  return _impl_.tables_;
}
inline ::epoch_proto::TableList* TearSheet::mutable_tables() {
  ::epoch_proto::TableList* _msg = _internal_mutable_tables();
  // @@protoc_insertion_point(field_mutable:epoch_proto.TearSheet.tables)
  return _msg;
}
inline void TearSheet::set_allocated_tables(::epoch_proto::TableList* tables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tables_;
  }
  if (tables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tables);
    if (message_arena != submessage_arena) {
      tables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tables, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tables_ = tables;
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.TearSheet.tables)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FullTearSheet

// map<string, .epoch_proto.TearSheet> categories = 1;
inline int FullTearSheet::_internal_categories_size() const {
  return _impl_.categories_.size();
}
inline int FullTearSheet::categories_size() const {
  return _internal_categories_size();
}
inline void FullTearSheet::clear_categories() {
  _impl_.categories_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >&
FullTearSheet::_internal_categories() const {
  return _impl_.categories_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >&
FullTearSheet::categories() const {
  // @@protoc_insertion_point(field_map:epoch_proto.FullTearSheet.categories)
  return _internal_categories();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >*
FullTearSheet::_internal_mutable_categories() {
  return _impl_.categories_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >*
FullTearSheet::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_map:epoch_proto.FullTearSheet.categories)
  return _internal_mutable_categories();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace epoch_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tearsheet_2eproto
