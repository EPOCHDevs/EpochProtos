// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tearsheet.proto

#include "tearsheet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace epoch_proto {
PROTOBUF_CONSTEXPR CardDefList::CardDefList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CardDefListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CardDefListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CardDefListDefaultTypeInternal() {}
  union {
    CardDefList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CardDefListDefaultTypeInternal _CardDefList_default_instance_;
PROTOBUF_CONSTEXPR ChartList::ChartList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.charts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartListDefaultTypeInternal() {}
  union {
    ChartList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartListDefaultTypeInternal _ChartList_default_instance_;
PROTOBUF_CONSTEXPR TableList::TableList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableListDefaultTypeInternal() {}
  union {
    TableList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableListDefaultTypeInternal _TableList_default_instance_;
PROTOBUF_CONSTEXPR TearSheet::TearSheet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cards_)*/nullptr
  , /*decltype(_impl_.charts_)*/nullptr
  , /*decltype(_impl_.tables_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TearSheetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TearSheetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TearSheetDefaultTypeInternal() {}
  union {
    TearSheet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TearSheetDefaultTypeInternal _TearSheet_default_instance_;
PROTOBUF_CONSTEXPR FullTearSheet_CategoriesEntry_DoNotUse::FullTearSheet_CategoriesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FullTearSheet_CategoriesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullTearSheet_CategoriesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullTearSheet_CategoriesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FullTearSheet_CategoriesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullTearSheet_CategoriesEntry_DoNotUseDefaultTypeInternal _FullTearSheet_CategoriesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FullTearSheet::FullTearSheet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.categories_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FullTearSheetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullTearSheetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullTearSheetDefaultTypeInternal() {}
  union {
    FullTearSheet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullTearSheetDefaultTypeInternal _FullTearSheet_default_instance_;
}  // namespace epoch_proto
static ::_pb::Metadata file_level_metadata_tearsheet_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tearsheet_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tearsheet_2eproto = nullptr;

const uint32_t TableStruct_tearsheet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::CardDefList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::CardDefList, _impl_.cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::ChartList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::ChartList, _impl_.charts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::TableList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::TableList, _impl_.tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::TearSheet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::TearSheet, _impl_.cards_),
  PROTOBUF_FIELD_OFFSET(::epoch_proto::TearSheet, _impl_.charts_),
  PROTOBUF_FIELD_OFFSET(::epoch_proto::TearSheet, _impl_.tables_),
  PROTOBUF_FIELD_OFFSET(::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::FullTearSheet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::epoch_proto::FullTearSheet, _impl_.categories_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::epoch_proto::CardDefList)},
  { 7, -1, -1, sizeof(::epoch_proto::ChartList)},
  { 14, -1, -1, sizeof(::epoch_proto::TableList)},
  { 21, -1, -1, sizeof(::epoch_proto::TearSheet)},
  { 30, 38, -1, sizeof(::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse)},
  { 40, -1, -1, sizeof(::epoch_proto::FullTearSheet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::epoch_proto::_CardDefList_default_instance_._instance,
  &::epoch_proto::_ChartList_default_instance_._instance,
  &::epoch_proto::_TableList_default_instance_._instance,
  &::epoch_proto::_TearSheet_default_instance_._instance,
  &::epoch_proto::_FullTearSheet_CategoriesEntry_DoNotUse_default_instance_._instance,
  &::epoch_proto::_FullTearSheet_default_instance_._instance,
};

const char descriptor_table_protodef_tearsheet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017tearsheet.proto\022\013epoch_proto\032\014common.p"
  "roto\032\017table_def.proto\032\017chart_def.proto\"2"
  "\n\013CardDefList\022#\n\005cards\030\001 \003(\0132\024.epoch_pro"
  "to.CardDef\"/\n\tChartList\022\"\n\006charts\030\001 \003(\0132"
  "\022.epoch_proto.Chart\"/\n\tTableList\022\"\n\006tabl"
  "es\030\001 \003(\0132\022.epoch_proto.Table\"\204\001\n\tTearShe"
  "et\022\'\n\005cards\030\001 \001(\0132\030.epoch_proto.CardDefL"
  "ist\022&\n\006charts\030\002 \001(\0132\026.epoch_proto.ChartL"
  "ist\022&\n\006tables\030\003 \001(\0132\026.epoch_proto.TableL"
  "ist\"\232\001\n\rFullTearSheet\022>\n\ncategories\030\001 \003("
  "\0132*.epoch_proto.FullTearSheet.Categories"
  "Entry\032I\n\017CategoriesEntry\022\013\n\003key\030\001 \001(\t\022%\n"
  "\005value\030\002 \001(\0132\026.epoch_proto.TearSheet:\0028\001"
  "Br\n\031com.epochlab.epoch_protosB\016TearSheet"
  "ProtoZ#github.com/epochlab/epoch_protos/"
  "go\252\002\037EpochLab.EpochProtos.EpochProtob\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tearsheet_2eproto_deps[3] = {
  &::descriptor_table_chart_5fdef_2eproto,
  &::descriptor_table_common_2eproto,
  &::descriptor_table_table_5fdef_2eproto,
};
static ::_pbi::once_flag descriptor_table_tearsheet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tearsheet_2eproto = {
    false, false, 644, descriptor_table_protodef_tearsheet_2eproto,
    "tearsheet.proto",
    &descriptor_table_tearsheet_2eproto_once, descriptor_table_tearsheet_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_tearsheet_2eproto::offsets,
    file_level_metadata_tearsheet_2eproto, file_level_enum_descriptors_tearsheet_2eproto,
    file_level_service_descriptors_tearsheet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tearsheet_2eproto_getter() {
  return &descriptor_table_tearsheet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tearsheet_2eproto(&descriptor_table_tearsheet_2eproto);
namespace epoch_proto {

// ===================================================================

class CardDefList::_Internal {
 public:
};

void CardDefList::clear_cards() {
  _impl_.cards_.Clear();
}
CardDefList::CardDefList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:epoch_proto.CardDefList)
}
CardDefList::CardDefList(const CardDefList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CardDefList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cards_){from._impl_.cards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epoch_proto.CardDefList)
}

inline void CardDefList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CardDefList::~CardDefList() {
  // @@protoc_insertion_point(destructor:epoch_proto.CardDefList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CardDefList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cards_.~RepeatedPtrField();
}

void CardDefList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CardDefList::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch_proto.CardDefList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardDefList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .epoch_proto.CardDef cards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CardDefList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch_proto.CardDefList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .epoch_proto.CardDef cards = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cards_size()); i < n; i++) {
    const auto& repfield = this->_internal_cards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch_proto.CardDefList)
  return target;
}

size_t CardDefList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch_proto.CardDefList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epoch_proto.CardDef cards = 1;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->_impl_.cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CardDefList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CardDefList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CardDefList::GetClassData() const { return &_class_data_; }


void CardDefList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CardDefList*>(&to_msg);
  auto& from = static_cast<const CardDefList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:epoch_proto.CardDefList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cards_.MergeFrom(from._impl_.cards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CardDefList::CopyFrom(const CardDefList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch_proto.CardDefList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardDefList::IsInitialized() const {
  return true;
}

void CardDefList::InternalSwap(CardDefList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cards_.InternalSwap(&other->_impl_.cards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardDefList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tearsheet_2eproto_getter, &descriptor_table_tearsheet_2eproto_once,
      file_level_metadata_tearsheet_2eproto[0]);
}

// ===================================================================

class ChartList::_Internal {
 public:
};

void ChartList::clear_charts() {
  _impl_.charts_.Clear();
}
ChartList::ChartList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:epoch_proto.ChartList)
}
ChartList::ChartList(const ChartList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.charts_){from._impl_.charts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epoch_proto.ChartList)
}

inline void ChartList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.charts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartList::~ChartList() {
  // @@protoc_insertion_point(destructor:epoch_proto.ChartList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.charts_.~RepeatedPtrField();
}

void ChartList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartList::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch_proto.ChartList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.charts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .epoch_proto.Chart charts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch_proto.ChartList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .epoch_proto.Chart charts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_charts_size()); i < n; i++) {
    const auto& repfield = this->_internal_charts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch_proto.ChartList)
  return target;
}

size_t ChartList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch_proto.ChartList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epoch_proto.Chart charts = 1;
  total_size += 1UL * this->_internal_charts_size();
  for (const auto& msg : this->_impl_.charts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartList::GetClassData() const { return &_class_data_; }


void ChartList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartList*>(&to_msg);
  auto& from = static_cast<const ChartList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:epoch_proto.ChartList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.charts_.MergeFrom(from._impl_.charts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartList::CopyFrom(const ChartList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch_proto.ChartList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartList::IsInitialized() const {
  return true;
}

void ChartList::InternalSwap(ChartList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.charts_.InternalSwap(&other->_impl_.charts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tearsheet_2eproto_getter, &descriptor_table_tearsheet_2eproto_once,
      file_level_metadata_tearsheet_2eproto[1]);
}

// ===================================================================

class TableList::_Internal {
 public:
};

void TableList::clear_tables() {
  _impl_.tables_.Clear();
}
TableList::TableList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:epoch_proto.TableList)
}
TableList::TableList(const TableList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tables_){from._impl_.tables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epoch_proto.TableList)
}

inline void TableList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TableList::~TableList() {
  // @@protoc_insertion_point(destructor:epoch_proto.TableList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tables_.~RepeatedPtrField();
}

void TableList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableList::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch_proto.TableList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .epoch_proto.Table tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch_proto.TableList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .epoch_proto.Table tables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tables_size()); i < n; i++) {
    const auto& repfield = this->_internal_tables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch_proto.TableList)
  return target;
}

size_t TableList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch_proto.TableList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epoch_proto.Table tables = 1;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->_impl_.tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableList::GetClassData() const { return &_class_data_; }


void TableList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableList*>(&to_msg);
  auto& from = static_cast<const TableList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:epoch_proto.TableList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tables_.MergeFrom(from._impl_.tables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableList::CopyFrom(const TableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch_proto.TableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableList::IsInitialized() const {
  return true;
}

void TableList::InternalSwap(TableList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tables_.InternalSwap(&other->_impl_.tables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tearsheet_2eproto_getter, &descriptor_table_tearsheet_2eproto_once,
      file_level_metadata_tearsheet_2eproto[2]);
}

// ===================================================================

class TearSheet::_Internal {
 public:
  static const ::epoch_proto::CardDefList& cards(const TearSheet* msg);
  static const ::epoch_proto::ChartList& charts(const TearSheet* msg);
  static const ::epoch_proto::TableList& tables(const TearSheet* msg);
};

const ::epoch_proto::CardDefList&
TearSheet::_Internal::cards(const TearSheet* msg) {
  return *msg->_impl_.cards_;
}
const ::epoch_proto::ChartList&
TearSheet::_Internal::charts(const TearSheet* msg) {
  return *msg->_impl_.charts_;
}
const ::epoch_proto::TableList&
TearSheet::_Internal::tables(const TearSheet* msg) {
  return *msg->_impl_.tables_;
}
TearSheet::TearSheet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:epoch_proto.TearSheet)
}
TearSheet::TearSheet(const TearSheet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TearSheet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cards_){nullptr}
    , decltype(_impl_.charts_){nullptr}
    , decltype(_impl_.tables_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cards()) {
    _this->_impl_.cards_ = new ::epoch_proto::CardDefList(*from._impl_.cards_);
  }
  if (from._internal_has_charts()) {
    _this->_impl_.charts_ = new ::epoch_proto::ChartList(*from._impl_.charts_);
  }
  if (from._internal_has_tables()) {
    _this->_impl_.tables_ = new ::epoch_proto::TableList(*from._impl_.tables_);
  }
  // @@protoc_insertion_point(copy_constructor:epoch_proto.TearSheet)
}

inline void TearSheet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cards_){nullptr}
    , decltype(_impl_.charts_){nullptr}
    , decltype(_impl_.tables_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TearSheet::~TearSheet() {
  // @@protoc_insertion_point(destructor:epoch_proto.TearSheet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TearSheet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cards_;
  if (this != internal_default_instance()) delete _impl_.charts_;
  if (this != internal_default_instance()) delete _impl_.tables_;
}

void TearSheet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TearSheet::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch_proto.TearSheet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cards_ != nullptr) {
    delete _impl_.cards_;
  }
  _impl_.cards_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.charts_ != nullptr) {
    delete _impl_.charts_;
  }
  _impl_.charts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tables_ != nullptr) {
    delete _impl_.tables_;
  }
  _impl_.tables_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TearSheet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .epoch_proto.CardDefList cards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cards(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .epoch_proto.ChartList charts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_charts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .epoch_proto.TableList tables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tables(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TearSheet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch_proto.TearSheet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .epoch_proto.CardDefList cards = 1;
  if (this->_internal_has_cards()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cards(this),
        _Internal::cards(this).GetCachedSize(), target, stream);
  }

  // .epoch_proto.ChartList charts = 2;
  if (this->_internal_has_charts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::charts(this),
        _Internal::charts(this).GetCachedSize(), target, stream);
  }

  // .epoch_proto.TableList tables = 3;
  if (this->_internal_has_tables()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tables(this),
        _Internal::tables(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch_proto.TearSheet)
  return target;
}

size_t TearSheet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch_proto.TearSheet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epoch_proto.CardDefList cards = 1;
  if (this->_internal_has_cards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cards_);
  }

  // .epoch_proto.ChartList charts = 2;
  if (this->_internal_has_charts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.charts_);
  }

  // .epoch_proto.TableList tables = 3;
  if (this->_internal_has_tables()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tables_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TearSheet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TearSheet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TearSheet::GetClassData() const { return &_class_data_; }


void TearSheet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TearSheet*>(&to_msg);
  auto& from = static_cast<const TearSheet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:epoch_proto.TearSheet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cards()) {
    _this->_internal_mutable_cards()->::epoch_proto::CardDefList::MergeFrom(
        from._internal_cards());
  }
  if (from._internal_has_charts()) {
    _this->_internal_mutable_charts()->::epoch_proto::ChartList::MergeFrom(
        from._internal_charts());
  }
  if (from._internal_has_tables()) {
    _this->_internal_mutable_tables()->::epoch_proto::TableList::MergeFrom(
        from._internal_tables());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TearSheet::CopyFrom(const TearSheet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch_proto.TearSheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TearSheet::IsInitialized() const {
  return true;
}

void TearSheet::InternalSwap(TearSheet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TearSheet, _impl_.tables_)
      + sizeof(TearSheet::_impl_.tables_)
      - PROTOBUF_FIELD_OFFSET(TearSheet, _impl_.cards_)>(
          reinterpret_cast<char*>(&_impl_.cards_),
          reinterpret_cast<char*>(&other->_impl_.cards_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TearSheet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tearsheet_2eproto_getter, &descriptor_table_tearsheet_2eproto_once,
      file_level_metadata_tearsheet_2eproto[3]);
}

// ===================================================================

FullTearSheet_CategoriesEntry_DoNotUse::FullTearSheet_CategoriesEntry_DoNotUse() {}
FullTearSheet_CategoriesEntry_DoNotUse::FullTearSheet_CategoriesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FullTearSheet_CategoriesEntry_DoNotUse::MergeFrom(const FullTearSheet_CategoriesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FullTearSheet_CategoriesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tearsheet_2eproto_getter, &descriptor_table_tearsheet_2eproto_once,
      file_level_metadata_tearsheet_2eproto[4]);
}

// ===================================================================

class FullTearSheet::_Internal {
 public:
};

FullTearSheet::FullTearSheet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FullTearSheet::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:epoch_proto.FullTearSheet)
}
FullTearSheet::FullTearSheet(const FullTearSheet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FullTearSheet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.categories_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.categories_.MergeFrom(from._impl_.categories_);
  // @@protoc_insertion_point(copy_constructor:epoch_proto.FullTearSheet)
}

inline void FullTearSheet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.categories_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FullTearSheet::~FullTearSheet() {
  // @@protoc_insertion_point(destructor:epoch_proto.FullTearSheet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FullTearSheet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.categories_.Destruct();
  _impl_.categories_.~MapField();
}

void FullTearSheet::ArenaDtor(void* object) {
  FullTearSheet* _this = reinterpret_cast< FullTearSheet* >(object);
  _this->_impl_.categories_.Destruct();
}
void FullTearSheet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FullTearSheet::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch_proto.FullTearSheet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.categories_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullTearSheet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .epoch_proto.TearSheet> categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.categories_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullTearSheet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch_proto.FullTearSheet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .epoch_proto.TearSheet> categories = 1;
  if (!this->_internal_categories().empty()) {
    using MapType = ::_pb::Map<std::string, ::epoch_proto::TearSheet>;
    using WireHelper = FullTearSheet_CategoriesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_categories();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "epoch_proto.FullTearSheet.CategoriesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch_proto.FullTearSheet)
  return target;
}

size_t FullTearSheet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch_proto.FullTearSheet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .epoch_proto.TearSheet> categories = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_categories_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epoch_proto::TearSheet >::const_iterator
      it = this->_internal_categories().begin();
      it != this->_internal_categories().end(); ++it) {
    total_size += FullTearSheet_CategoriesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullTearSheet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FullTearSheet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullTearSheet::GetClassData() const { return &_class_data_; }


void FullTearSheet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FullTearSheet*>(&to_msg);
  auto& from = static_cast<const FullTearSheet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:epoch_proto.FullTearSheet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.categories_.MergeFrom(from._impl_.categories_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FullTearSheet::CopyFrom(const FullTearSheet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch_proto.FullTearSheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullTearSheet::IsInitialized() const {
  return true;
}

void FullTearSheet::InternalSwap(FullTearSheet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullTearSheet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tearsheet_2eproto_getter, &descriptor_table_tearsheet_2eproto_once,
      file_level_metadata_tearsheet_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace epoch_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::epoch_proto::CardDefList*
Arena::CreateMaybeMessage< ::epoch_proto::CardDefList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch_proto::CardDefList >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch_proto::ChartList*
Arena::CreateMaybeMessage< ::epoch_proto::ChartList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch_proto::ChartList >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch_proto::TableList*
Arena::CreateMaybeMessage< ::epoch_proto::TableList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch_proto::TableList >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch_proto::TearSheet*
Arena::CreateMaybeMessage< ::epoch_proto::TearSheet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch_proto::TearSheet >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch_proto::FullTearSheet_CategoriesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch_proto::FullTearSheet*
Arena::CreateMaybeMessage< ::epoch_proto::FullTearSheet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch_proto::FullTearSheet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
